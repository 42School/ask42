%h1.text-center
  = Room.find(params[:room_id]).name
  = link_to 'Ask a question', new_room_question_path, class: "btn btn-default"


%table.table.table-hover
  %tbody.list
    - @questions.each_with_index do |question, index|
      %tr
        %td.votes
          - if user_signed_in? and question.question_voters.where(user_id: current_user.id).last
            - if question.question_voters.where(user_id: current_user.id).last.vote > 0
              .glyphicon.glyphicon-triangle-top.upvote-active
              = content_tag :div, class: "vote_count", :data => {votes: question.question_voters.pluck(:vote)} do
                test
              = link_to "", vote_path(:question_id => question.id, :vote => "downvote"), :method => :post, remote: :true, class: "glyphicon glyphicon-triangle-bottom downvote vote", id: "downvote"
            - else
              = link_to "", vote_path(:question_id => question.id, :vote => "upvote"), :method => :post, remote: :true, class: "glyphicon glyphicon-triangle-top upvote vote", id: "upvote"
              = content_tag "div", class: "vote_count", :data => {votes: question.question_voters.pluck(:vote)} do
                test
              .glyphicon.glyphicon-triangle-bottom.downvote-active

          - elsif user_signed_in?
            = link_to "", vote_path(:question_id => question.id, :vote => "upvote"), :method => :post, remote: :true, class: "glyphicon glyphicon-triangle-top upvote vote", id: "upvote"
            = content_tag "div", class: "vote_count", :data => {votes: question.question_voters.pluck(:vote)} do
              test
            = link_to "", vote_path(:question_id => question.id, :vote => "downvote"), :method => :post, remote: :true, class: "glyphicon glyphicon-triangle-bottom downvote vote", id: "downvote"

          - else
            = content_tag "div", class: "vote_count", :data => {votes: question.question_voters.pluck(:vote)} do
              test

        %td.question
          %p #{question.question}
          %p.small_info by #{question.user.login} #{time_ago_in_words(question.created_at)} ago
        - if user_signed_in? and (current_user.admin? or RoomsUser.where(:user_id => current_user.id, :room_id => params[:room_id]).first.editor? rescue nil)
<<<<<<< HEAD
          %td.action
            = simple_form_for question, :remote => true do |f|
              = f.input :answered, :as => :hidden, :input_html => {:value => true}
              = f.button :submit, "Answer", class: "btn btn-success btn-xs"
              = link_to 'Delete', question_path(question), method: :delete, data: { confirm: "Are you sure you want to delete this question?" }, class: "btn btn-xs btn-danger"
=======
          %td.action.pull-right.col-lg-2
            = simple_form_for question, :remote => true do |f|
              .btn-group
                = f.input :answered, :as => :hidden, :input_html => {:value => true}
                = f.button :submit, "Answer", class: "btn btn-info btn-xs"
                - if user_signed_in? and current_user.admin?
                  = link_to '', question_path(question), method: :delete, data: { confirm: "Are you sure you want to delete this question?" }, class: "btn btn-xs btn-danger glyphicon glyphicon-remove"


-if @questions_answered.first
  %h3.text-center="Answered Questions"
%table.table.table-hover
  %tbody.list
    - @questions_answered.each_with_index do |question, index|
      %tr.active
        %td.votes.small
          .vote_count
            = question.question_voters.map {|x| x.vote}.inject{|sum,x| sum + x }.to_i

        %td.question.answered
          %p #{question.question}
          %p.small_info by #{question.user.login} #{time_ago_in_words(question.created_at)} ago
        - if user_signed_in? and current_user.admin?
          %td.pull-right.col-lg-2
            = link_to '', question_path(question), method: :delete, data: { confirm: "Are you sure you want to delete this question?" }, class: "btn btn-xs btn-danger glyphicon glyphicon-remove"
>>>>>>> 0b3f271a7c8b52fc37d130b5017d44b9da7c31ae
